Libraries
-logback

-log4j2
--more performant

-java.util.logging (권장하지않음)




Logging interface iibraries
-SLF4J
--simple loggin facaed for jave

-log4j2 directly
--pros(장점)
---more features
--cons(단점)
---less flexibilty

-apache commons logging
--classloader

1. gradle 에서 종속하고 있는 로깅 기능들을 살펴볼 수 있다.
2. bulid.gradle.kts 에서 	implementation("org.springframework.boot:spring-boot-starter-logging")
추가

3. basic logging usage
로깅 인터페이스 slf4j를 사용 -> LoggerFactory.getLogger(this::class.java)
java 클래스를 전달하여 로거를 생성
s
3.1 추적 trace
라인을 추적하는 방법
3.2 디버그 debug
3.3 정보 info
3.4 알림 경고 warn
3.5 오류 발생시 error

4. 정보를 info를 통해서 로그에 기록하고
1/0 으로 오류를 발생시킨후에 발생된 오류를 try catch 를 통해서 보낸다음에 error를 통해서 인수 e를 가져와 저장한다.

5. 문제를 조사해 설정을 변경하기 위해서 properties를 설정한다.
logging.level.root=TRACE -> 추적하기 -> 장기적으로 추적하는 방식은 좋지 않음

logging.level.com.example.firstboot.HelloController=TRACE
컨트롤러 로그 라인만 추적한다.

6. 파일로 뽑아내기위해서 google -> spring boot logging -> logback은 4가지 방법이 있지만 최대한 -spring이 있는 파일로 변형하는 것이 좋다.
-> logback-spring.xml
-> resources 폴더 내부에 파일을 생성

7. logback configuration -> appenders
파일을 쓰는 법이 나와있다.
코드에는 타입과 어펜더 코드가 나와있다.

8. STDOUT, FILE 어펜더를 추가한다.

9. switch the project to log4j2 and reconfigure
google->spring boot how to guides

종속성을 추가해 교체해줘야한다.
dependencies {
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
}
추가했던 	implementation("org.springframework.boot:spring-boot-starter-logging") 제거

10. log4j2 다시 로그인 해야하므로 새 log4j2-spring.xml을 추가한다.
google->log4j2 configurination에서 configuration appened
속성만 필요하기에 안에 있는 옵션은 삭제한다.

파일의 세션과 로그의 세션을 추가하고 파일에 대한 속성으로 교체해줍니다.

마지막으로 루트 로거 수준에서 정보를 남겨두고 표준 출력을 info 참조합니다.

ref의 이름 대소문자 구별하기.

